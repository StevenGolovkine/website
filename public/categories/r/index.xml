<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R | TwentyFourSecs</title>
    <link>/categories/r/</link>
      <atom:link href="/categories/r/index.xml" rel="self" type="application/rss+xml" />
    <description>R</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Â© 2020 Steven Golovkine. All Rights Reserved</copyright><lastBuildDate>Thu, 25 Jul 2019 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/img/pic.jpg</url>
      <title>R</title>
      <link>/categories/r/</link>
    </image>
    
    <item>
      <title>knitr</title>
      <link>/post/knitr/</link>
      <pubDate>Thu, 25 Jul 2019 00:00:00 +0000</pubDate>
      <guid>/post/knitr/</guid>
      <description>&lt;p&gt;The package &lt;code&gt;knitr&lt;/code&gt; has been created by Yihui Xie. It is disponible on the 
&lt;a href=&#34;https://cran.r-project.org/web/packages/knitr/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CRAN&lt;/a&gt;
. Check out the official 
&lt;a href=&#34;https://yihui.name/knitr/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;website&lt;/a&gt;
 for more information. It is designed to build and generate nice report in &lt;strong&gt;R&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;questions&#34;&gt;Questions&lt;/h2&gt;
&lt;h3 id=&#34;how-to-render-latex-formula-in-ggplot-graphs-in-a-report-in-html&#34;&gt;How to render Latex formula in ggplot graphs in a report in html?&lt;/h3&gt;
&lt;p&gt;For a report in pdf, it is quite easy to render Latex formula in a ggplot graph. Just set the &lt;code&gt;dev&lt;/code&gt; variable to &lt;code&gt;&#39;tikz&#39;&lt;/code&gt; in a &lt;strong&gt;R&lt;/strong&gt; chunk. However, this method produces a pdf of the picture, and some browsers seem to have some trouble to show pdf files. So, the idea is to convert the pdf of the picture into a png file. For that, the &lt;strong&gt;R&lt;/strong&gt; chunk accept the option &lt;code&gt;fig.process&lt;/code&gt; and we will modify it to solve our problem.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r&#34;&gt;fig.process &amp;lt;- function(x) {
    x &amp;lt;- paste0(&#39;./&#39;, x)
    
    if(stringr::str_detect(x, &#39;pdf&#39;)){
      y &amp;lt;- stringr::str_replace(x, &#39;pdf&#39;, &#39;png&#39;)
      png::writePNG(pdftools::pdf_render_page(x), target = y, dpi = 300)
      return(y)
    } else {
      return(x)
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The function &lt;code&gt;fig.process&lt;/code&gt; takes a string as input (the path of the picture). If the picture is in pdf, it will convert it into png, otherwise, it will do nothing. And finally, the browser will render the picture correctly.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Package ggplot2</title>
      <link>/post/package-ggplot2/</link>
      <pubDate>Wed, 19 Dec 2018 00:00:00 +0000</pubDate>
      <guid>/post/package-ggplot2/</guid>
      <description>&lt;p&gt;The package &lt;code&gt;ggplot2&lt;/code&gt; has been created by Hadley Wickham among others. It is disponible on the 
&lt;a href=&#34;https://cloud.r-project.org/web/packages/ggplot2/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CRAN&lt;/a&gt;
. Check out the official 
&lt;a href=&#34;https://cloud.r-project.org/web/packages/ggplot2/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;website&lt;/a&gt;
 for more information. It is designed to provide nice graphics in an quite easy way.&lt;/p&gt;
&lt;h2 id=&#34;use-custom-theme&#34;&gt;Use custom theme&lt;/h2&gt;
&lt;p&gt;First, define a particular function that define a new theme based on another.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r&#34;&gt;theme_custom = function(base_family = &amp;quot;Times&amp;quot;){
  theme_minimal(base_family = base_family) %+replace%
    theme(
      plot.title = element_text(size = 20),
      plot.subtitle = element_text(size = 16, vjust = -1),
      
      axis.title = element_text(size = 18),
      axis.text = element_text(size = 16),
      
      axis.title.y = element_text(margin = margin(t = 0, r = 20, b = 0, l = 0), angle = 90),
      axis.title.x = element_text(margin = margin(t = 20, r = 0, b = 20, l = 0)),
      
      strip.text.x = element_text(size = 16),
      strip.text.y = element_text(size = 16),
      
      legend.text = element_text(size = 18),
      legend.text.align = 0
    )
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, just use it as any other theme.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r&#34;&gt;ggplot(aes(x, y)) + theme_custom()
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Package xml2</title>
      <link>/post/package-xml2/</link>
      <pubDate>Thu, 06 Dec 2018 00:00:00 +0000</pubDate>
      <guid>/post/package-xml2/</guid>
      <description>&lt;p&gt;The package &lt;code&gt;xml2&lt;/code&gt; has been created by Hadley Wickham among others. It is disponible on the 
&lt;a href=&#34;https://cran.r-project.org/web/packages/xml2/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CRAN&lt;/a&gt;
. It is designed to work with XML files in &lt;strong&gt;R&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;installation-issues&#34;&gt;Installation issues&lt;/h2&gt;
&lt;h3 id=&#34;configuration-failed-because-libxml-20-was-not-found&#34;&gt;Configuration failed because libxml-2.0 was not found&lt;/h3&gt;
&lt;p&gt;First, check that the folders given by the following commands exits:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;which xml2-config
# /usr/bin/xml2-config

xml2-config --libs
# -L/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.13.sdk/usr/lib -lxml2 -lz -lpthread -licucore -lm

xml2-config --cflags
# -I/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.13.sdk/usr/include/libxml2

which pkg-config
# /usr/local/bin/pkg-config

pkg-config --cflags libxml-2.0
# -I/usr/include/libxml2

pkg-config --libs libxml-2.0
# -lxml2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the case where, &lt;code&gt;/usr/include&lt;/code&gt; does not exists, run the command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;xcode-select --install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And then, re-try to install the package &lt;code&gt;xml2&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Set up R</title>
      <link>/post/set-up-r/</link>
      <pubDate>Wed, 05 Dec 2018 00:00:00 +0000</pubDate>
      <guid>/post/set-up-r/</guid>
      <description>&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://cran.r-project.org&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;R&lt;/strong&gt;&lt;/a&gt;
 is very easy to install on MacOS.&lt;/p&gt;
&lt;p&gt;The first thing to do is to add &lt;strong&gt;R&lt;/strong&gt; to the available formulae in &lt;strong&gt;Homebrew&lt;/strong&gt;. And then, install &lt;strong&gt;R&lt;/strong&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew tap homebrew/science
brew install r
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It could be necessary to install &lt;strong&gt;XQuartz&lt;/strong&gt; to use &lt;strong&gt;R&lt;/strong&gt; (but it is also possible that it is installed by default)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew cask install xquartz
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A nice GUI to use with &lt;strong&gt;R&lt;/strong&gt; is &lt;strong&gt;Rstudio&lt;/strong&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew cask install rstudio
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;jupyter-kernel&#34;&gt;Jupyter kernel&lt;/h2&gt;
&lt;p&gt;The installation of the &lt;strong&gt;R&lt;/strong&gt; kernel for Jupyter is straightforward following this 
&lt;a href=&#34;https://irkernel.github.io/installation/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;link&lt;/a&gt;
.&lt;/p&gt;
&lt;p&gt;On MacOS, from a Terminal, run &lt;code&gt;R&lt;/code&gt; to launch a &lt;strong&gt;R&lt;/strong&gt; session. Then, run the following commands:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&#39;IRKernel&#39;) # Install the package
IRKernel::installspec() # Make Jupyter to see the R kernel
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;configuration-of-the-proxies&#34;&gt;Configuration of the proxies&lt;/h2&gt;
&lt;p&gt;How to install packages if you have to deal with proxies? First, you should know the repository where &lt;strong&gt;R&lt;/strong&gt; is installed.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;R.home()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And then, you have to add to the file &lt;code&gt;${R_HOME}/etc/Renviron&lt;/code&gt; the lines:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;http_proxy=http://&amp;lt;user_name&amp;gt;:&amp;lt;password&amp;gt;@&amp;lt;host&amp;gt;:&amp;lt;port&amp;gt;/
https_proxy=https://&amp;lt;user_name&amp;gt;:&amp;lt;password&amp;gt;@&amp;lt;host&amp;gt;:&amp;lt;port&amp;gt;/
ftp_proxy=ftp://&amp;lt;user_name&amp;gt;:&amp;lt;password&amp;gt;@&amp;lt;host&amp;gt;:&amp;lt;port&amp;gt;/
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;some-modification-to-functions&#34;&gt;Some modification to functions&lt;/h2&gt;
&lt;h3 id=&#34;summary-functions&#34;&gt;Summary functions&lt;/h3&gt;
&lt;details&gt;
&lt;summary&gt;Dataframe summary&lt;/summary&gt;
&lt;p&gt;
```{r}
summary_df &lt;- function(df){
  # Function that get a dataframe as input and return a list with two entries.
  # One entry is for factor variables, which is a list that count the factors.
  # The other entry is for numeric variables, which contains statistics on it.
  result &lt;- list()
&lt;p&gt;if(any(sapply(df, class) == &amp;lsquo;factor&amp;rsquo;)){
result$Factor &amp;lt;- df %&amp;gt;% select_if(is.factor) %&amp;gt;% imap(summary_column)
}
if(any(sapply(df, class) == &amp;lsquo;numeric&amp;rsquo;)){
result$Numeric &amp;lt;- df %&amp;gt;% select_if(is.numeric) %&amp;gt;% imap_dfr(summary_column)
}&lt;/p&gt;
&lt;p&gt;return(result)
}&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;/p&amp;gt;
&amp;lt;/details&amp;gt;	

&amp;lt;details&amp;gt;
&amp;lt;summary&amp;gt;Column dataframe summary&amp;lt;/summary&amp;gt;
&amp;lt;p&amp;gt;
```{r}
summary_column &amp;lt;- function(df.column, name.column){
  # Function that get a column from a dataframe and return statistics on it.
  # Depending on the column class, the results will not be the same.
  if(class(df.column) == &#39;factor&#39;){
    colName &amp;lt;- name.column
    df.column %&amp;gt;% fct_count() %&amp;gt;% rename(!!colName := f, Count = n)    
  } else if(class(df.column) == &#39;numeric&#39;){
    tibble(
      Name = name.column,
      NA_num = sum(is.na(df.column)),
      Unique = length(unique(df.column)),
      Range = max(df.column, na.rm = TRUE) - min(df.column, na.rm = TRUE),
      Mean = round(mean(df.column, na.rm = TRUE), digits = 2),
      Variance = round(var(df.column, na.rm = TRUE), digits = 2),
      Minimum = min(df.column, na.rm = TRUE),
      Q05 = quantile(df.column, probs = .05, na.rm = TRUE),
      Q10 = quantile(df.column, probs = .10, na.rm = TRUE),
      Q25 = quantile(df.column, probs = .25, na.rm = TRUE),
      Q50 = quantile(df.column, probs = .50, na.rm = TRUE),
      Q75 = quantile(df.column, probs = .75, na.rm = TRUE),
      Q90 = quantile(df.column, probs = .90, na.rm = TRUE),
      Q95 = quantile(df.column, probs = .95, na.rm = TRUE),
      Maximum = max(df.column, na.rm = TRUE)
    )
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/p&gt;
&lt;/details&gt;
&lt;h3 id=&#34;print-functions&#34;&gt;Print functions&lt;/h3&gt;
&lt;details&gt;
&lt;summary&gt;Print summary dataframe&lt;/summary&gt;
&lt;p&gt;
```{r}
print_summary_df &lt;- function(l){
  # Print function for the summary of dataframe to be rendered in html.
  for(i in seq_along(l)){
    cat(glue::glue(&#34;&lt;ul&gt;&#34;))
    cat(glue::glue(&#34;&lt;li&gt; **{names(l)[i]} variables** &lt;/li&gt;\n\n&#34;))
    if(class(l[[i]]) == &#39;list&#39;){
      for(j in seq_along(l[[i]])){
        cat(glue::glue(&#34;&lt;ul&gt;&#34;))
        cat(glue::glue(&#34;&lt;li&gt; {names(l[[i]][j])} &lt;/li&gt;\n\n&#34;))
        cat(&#39;&lt;div style=&#34;overflow-x:auto;&#34;&gt;\n&#39;)
        l[[i]][j] %&gt;%
          kable(format = &#39;html&#39;) %&gt;%
          kable_styling(bootstrap_options = c(&#34;striped&#34;, &#34;hover&#34;, &#34;condensed&#34;, &#34;responsive&#34;), position = &#34;center&#34;) %&gt;%
          print()
        cat(&#39;&lt;/div&gt;&lt;/ul&gt;\n\n&#39;)
      }
    } else{
      cat(&#39;&lt;div style=&#34;overflow-x:auto;&#34;&gt;\n&#39;)
      l[[i]] %&gt;%
        kable(format = &#39;html&#39;) %&gt;%
        kable_styling(bootstrap_options = c(&#34;striped&#34;, &#34;hover&#34;, &#34;condensed&#34;, &#34;responsive&#34;), position = &#34;center&#34;) %&gt;%
        print()  
       cat(&#39;&lt;/div&gt;\n&#39;)
    }
    cat(glue::glue(&#34;&lt;/ul&gt;\n&#34;))
  }
}
&lt;pre&gt;&lt;code&gt;&amp;lt;/p&amp;gt;
&amp;lt;/details&amp;gt;

&amp;lt;details&amp;gt;
&amp;lt;summary&amp;gt;Print dataframe&amp;lt;/summary&amp;gt;
&amp;lt;p&amp;gt;
```{r}
print_df &amp;lt;- function(l){
  # Print function for dataframe to be renderer in html.
  cat(&#39;&amp;lt;div style=&amp;quot;overflow-x:auto;&amp;quot;&amp;gt;\n&#39;)
  l %&amp;gt;% 
    kable(format = &#39;html&#39;) %&amp;gt;%
    kable_styling(bootstrap_options = c(&amp;quot;striped&amp;quot;, &amp;quot;hover&amp;quot;, &amp;quot;condensed&amp;quot;, &amp;quot;responsive&amp;quot;), position = &amp;quot;center&amp;quot;) %&amp;gt;%
    print()
  cat(&#39;&amp;lt;/div&amp;gt;&amp;lt;/ul&amp;gt;\n\n&#39;)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/p&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;Print summary lm&lt;/summary&gt;
&lt;p&gt;
```{r}
print_summary_lm &lt;- function(lm_summary){
  # Print function for lm summary to be renderer in html.
  cat(glue::glue(&#34;Results of the linear model on the **{lm_summary$call$data}** dataset.\n&#34;))
&lt;p&gt;cat(glue::glue(&amp;ldquo;&lt;ul&gt;&amp;rdquo;))&lt;/p&gt;
&lt;h1 id=&#34;print-the-formula&#34;&gt;Print the formula&lt;/h1&gt;
&lt;p&gt;cat(glue::glue(&amp;ldquo;&lt;li&gt; &lt;em&gt;Formula&lt;/em&gt;: &amp;ldquo;,
&amp;ldquo;{deparse(lm_summary$call$formula)} &lt;/li&gt;&amp;rdquo;))&lt;/p&gt;
&lt;h1 id=&#34;treat-the-residuals&#34;&gt;Treat the residuals&lt;/h1&gt;
&lt;p&gt;cat(glue::glue(&amp;ldquo;&lt;li&gt; &lt;em&gt;Residuals&lt;/em&gt; &lt;/li&gt;\n&amp;rdquo;))
cat(&amp;lsquo;&lt;div style=&#34;overflow-x:auto;&#34;&gt;\n&amp;rsquo;)
lm_summary$residuals %&amp;gt;% summary_column(name.column = &amp;lsquo;Residuals&amp;rsquo;) %&amp;gt;%
kable(format = &amp;lsquo;html&amp;rsquo;, digits = 2) %&amp;gt;%
kable_styling(bootstrap_options = c(&amp;ldquo;striped&amp;rdquo;, &amp;ldquo;hover&amp;rdquo;, &amp;ldquo;condensed&amp;rdquo;, &amp;ldquo;responsive&amp;rdquo;), position = &amp;ldquo;center&amp;rdquo;) %&amp;gt;%
print()
cat(&amp;lsquo;&lt;/div&gt;\n\n&amp;rsquo;)&lt;/p&gt;
&lt;h1 id=&#34;treat-the-regression-coefficient&#34;&gt;Treat the regression coefficient&lt;/h1&gt;
&lt;p&gt;cat(glue::glue(&amp;ldquo;&lt;li&gt; &lt;em&gt;Coefficients&lt;/em&gt; &lt;/li&gt;\n&amp;rdquo;))
cat(&amp;lsquo;&lt;div style=&#34;overflow-x:auto;&#34;&gt;\n&amp;rsquo;)
coef &amp;lt;- lm_summary$coefficients
coef[, &amp;lsquo;Pr(&amp;gt;|t|)&#39;] &amp;lt;- format.pval(coef[, &amp;lsquo;Pr(&amp;gt;|t|)&#39;])
coef &amp;lt;- coef %&amp;gt;% as.data.frame(stringsAsFactors = FALSE) %&amp;gt;%
rownames_to_column(&amp;lsquo;Variable&amp;rsquo;) %&amp;gt;%
as.tibble() %&amp;gt;%
map_at(c(&amp;ldquo;Estimate&amp;rdquo;, &amp;ldquo;Std. Error&amp;rdquo;, &amp;ldquo;t value&amp;rdquo;), as.numeric)
coef %&amp;gt;% as.tibble() %&amp;gt;%
kable(format = &amp;lsquo;html&amp;rsquo;, digits = 5) %&amp;gt;%
kable_styling(bootstrap_options = c(&amp;ldquo;striped&amp;rdquo;, &amp;ldquo;hover&amp;rdquo;, &amp;ldquo;condensed&amp;rdquo;, &amp;ldquo;responsive&amp;rdquo;), position = &amp;ldquo;center&amp;rdquo;) %&amp;gt;%
print()
cat(&amp;lsquo;&lt;/div&gt;\n\n&amp;rsquo;)&lt;/p&gt;
&lt;h1 id=&#34;treat-other-stats&#34;&gt;Treat other stats&lt;/h1&gt;
&lt;p&gt;pval &amp;lt;- format.pval(pf(lm_summary$fstatistic[1L], lm_summary$fstatistic[2L],
lm_summary$fstatistic[3L], lower.tail = FALSE), digits = 3)
cat(glue::glue(&amp;ldquo;&lt;li&gt; &lt;em&gt;Residual standard error&lt;/em&gt;: &amp;ldquo;,
&amp;ldquo;{round(lm_summary$sigma, 3)} on {lm_summary$df[2]} degrees of freedom. &lt;/li&gt;&amp;rdquo;))
cat(glue::glue(&amp;ldquo;&lt;li&gt; &lt;em&gt;Multiple $R^2$&lt;/em&gt;: {round(lm_summary$r.squared, 3)}.&lt;/li&gt;&amp;rdquo;))
cat(glue::glue(&amp;ldquo;&lt;li&gt; &lt;em&gt;Adjusted $R^2$&lt;/em&gt;: {round(lm_summary$adj.r.squared, 3)}.&lt;/li&gt;&amp;rdquo;))
cat(glue::glue(&amp;ldquo;&lt;li&gt; &lt;em&gt;F-statistic&lt;/em&gt;: &amp;ldquo;,
&amp;ldquo;{round(lm_summary$fstatistic[1L], 3)} on {lm_summary$fstatistic[2L]} and {lm_summary$fstatistic[3L]}, &amp;ldquo;,
&amp;ldquo;p-value: {pval}. &lt;/li&gt;&amp;rdquo;))&lt;/p&gt;
&lt;p&gt;cat(glue::glue(&amp;ldquo;&lt;/ul&gt;&amp;rdquo;))
}&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;/p&amp;gt;
&amp;lt;/details&amp;gt;

&amp;lt;details&amp;gt;
&amp;lt;summary&amp;gt;Print summary glm&amp;lt;/summary&amp;gt;
&amp;lt;p&amp;gt;
```{r}
print_summary_glm &amp;lt;- function(glm_summary){
  cat(glue::glue(&amp;quot;Results of the model on the **{glm_summary$call$data}** dataset.\n&amp;quot;))
  
  cat(glue::glue(&amp;quot;&amp;lt;ul&amp;gt;&amp;quot;))
  # Print the formula
  cat(glue::glue(&amp;quot;&amp;lt;li&amp;gt; *Formula*: &amp;quot;, 
                 &amp;quot;{deparse(glm_summary$call$formula)} &amp;lt;/li&amp;gt;&amp;quot;))
  
  # Treat the residuals
  cat(glue::glue(&amp;quot;&amp;lt;li&amp;gt; *Residuals* &amp;lt;/li&amp;gt;\n&amp;quot;))
  cat(&#39;&amp;lt;div style=&amp;quot;overflow-x:auto;&amp;quot;&amp;gt;\n&#39;)
  glm_summary$deviance.resid %&amp;gt;% summary_column(name.column = &#39;Residuals&#39;) %&amp;gt;%
    kable(format = &#39;html&#39;, digits = 2) %&amp;gt;%
    kable_styling(bootstrap_options = c(&amp;quot;striped&amp;quot;, &amp;quot;hover&amp;quot;, &amp;quot;condensed&amp;quot;, &amp;quot;responsive&amp;quot;), position = &amp;quot;center&amp;quot;) %&amp;gt;%
    print()
  cat(&#39;&amp;lt;/div&amp;gt;\n\n&#39;)
  
  # Treat the regression coefficient
  cat(glue::glue(&amp;quot;&amp;lt;li&amp;gt; *Coefficients* &amp;lt;/li&amp;gt;\n&amp;quot;))
  cat(&#39;&amp;lt;div style=&amp;quot;overflow-x:auto;&amp;quot;&amp;gt;\n&#39;)
  coef &amp;lt;- glm_summary$coefficients
  coef[, &#39;Pr(&amp;gt;|z|)&#39;] &amp;lt;- format.pval(coef[, &#39;Pr(&amp;gt;|z|)&#39;])
  coef &amp;lt;- coef %&amp;gt;% as.data.frame(stringsAsFactors = FALSE) %&amp;gt;% 
    rownames_to_column(&#39;Variable&#39;) %&amp;gt;% 
    as.tibble() %&amp;gt;% 
    map_at(c(&amp;quot;Estimate&amp;quot;, &amp;quot;Std. Error&amp;quot;, &amp;quot;z value&amp;quot;), as.numeric)
  coef %&amp;gt;% as.tibble() %&amp;gt;%
    kable(format = &#39;html&#39;, digits = 5) %&amp;gt;%
    kable_styling(bootstrap_options = c(&amp;quot;striped&amp;quot;, &amp;quot;hover&amp;quot;, &amp;quot;condensed&amp;quot;, &amp;quot;responsive&amp;quot;), position = &amp;quot;center&amp;quot;) %&amp;gt;%
    print()
  cat(&#39;&amp;lt;/div&amp;gt;\n\n&#39;)
  
  # Treat other stats
  cat(glue::glue(&amp;quot;&amp;lt;li&amp;gt; *Null deviance*: &amp;quot;, 
                 &amp;quot;{round(glm_summary$null.deviance, 3)} on {glm_summary$df.null} degrees of freedom. &amp;lt;/li&amp;gt;&amp;quot;))
  cat(glue::glue(&amp;quot;&amp;lt;li&amp;gt; *Residual deviance*: &amp;quot;, 
                 &amp;quot;{round(glm_summary$deviance, 3)} on {glm_summary$df.residual} degrees of freedom. &amp;lt;/li&amp;gt;&amp;quot;))
  cat(glue::glue(&amp;quot;&amp;lt;li&amp;gt; *AIC*: &amp;quot;, 
                 &amp;quot;{round(glm_summary$aic, 3)}&amp;lt;/li&amp;gt;&amp;quot;))
  
  cat(glue::glue(&amp;quot;&amp;lt;/ul&amp;gt;\n&amp;quot;))
}

&lt;/code&gt;&lt;/pre&gt;
&lt;/p&gt;
&lt;/details&gt;
&lt;h3 id=&#34;plot-functions&#34;&gt;Plot functions&lt;/h3&gt;
&lt;details&gt;
&lt;summary&gt;Plot confusion matrix&lt;/summary&gt;
&lt;p&gt;
```{r}
plot_confusion_matrix &lt;- function(confusion_matrix){
  confusion_matrix %&gt;%
    as.data.frame(optional = TRUE) %&gt;% 
    rownames_to_column() %&gt;%
    rename(&#39;Var1&#39; = &#39;.&#39;) %&gt;%
    ggplot() +
    geom_text(aes(x = Var1, y = Var2, label = Freq), size = 4) +
    xlab(&#39;Prediction&#39;) +
    ylab(&#39;True&#39;) +
    geom_hline(aes(yintercept = 1.5), size = 0.2) +
    geom_vline(aes(xintercept = 1.5), size = 0.2) +
    theme_bw() +
    scale_x_discrete(position = &#34;top&#34;) +
    theme(panel.grid = element_blank(),
          axis.ticks = element_blank())
}
```
&lt;/p&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;Plot regsubset summary&lt;/summary&gt;
&lt;p&gt;
```{r}
ggregsubsets &lt;- function(x, criterion = c(&#34;rsq&#34;, &#34;rss&#34;, &#34;adjr2&#34;, &#34;cp&#34;, &#34;bic&#34;)){
  # https://gist.github.com/dkahle/7942a7eba8aaa026d0bab6a1e9d88580
  require(dplyr); require(ggplot2); require(tidyr)
  if(inherits(x, &#34;regsubsets&#34;)) x &lt;- summary(x)
  if(!inherits(x, &#34;summary.regsubsets&#34;))
    stop(&#34;The input to ggregsubsets() should be the result of regsubsets().&#34;)
  df &lt;- bind_cols(
    as.data.frame(x$which), 
    as.data.frame(x[criterion]),
    data.frame(nvars = 1:nrow(x$which))
  )
  names(df)[1] &lt;- &#34;Int&#34;
  if(&#34;rsq&#34; %in% criterion) df &lt;- df %&gt;% mutate(rsq = 100*rsq)
  if(&#34;adjr2&#34; %in% criterion) df &lt;- df %&gt;% mutate(adjr2 = 100*adjr2)
&lt;p&gt;df &amp;lt;- df %&amp;gt;%
gather(variable, is_in, -criterion, -nvars) %&amp;gt;%
gather(measure, value, -nvars, -variable, -is_in)&lt;/p&gt;
&lt;p&gt;if(&amp;ldquo;rsq&amp;rdquo; %in% criterion) df[df[&amp;lsquo;measure&amp;rsquo;] == &amp;lsquo;rsq&amp;rsquo;, &amp;lsquo;measure&amp;rsquo;] &amp;lt;- &amp;lsquo;$R^2$&amp;rsquo;
if(&amp;ldquo;rss&amp;rdquo; %in% criterion) df[df[&amp;lsquo;measure&amp;rsquo;] == &amp;lsquo;rss&amp;rsquo;, &amp;lsquo;measure&amp;rsquo;] &amp;lt;- &amp;lsquo;$RSS$&amp;rsquo;
if(&amp;ldquo;adjr2&amp;rdquo; %in% criterion) df[df[&amp;lsquo;measure&amp;rsquo;] == &amp;lsquo;adjr2&amp;rsquo;, &amp;lsquo;measure&amp;rsquo;] &amp;lt;- &amp;lsquo;Adjusted $R^2$&amp;rsquo;
if(&amp;ldquo;cp&amp;rdquo; %in% criterion) df[df[&amp;lsquo;measure&amp;rsquo;] == &amp;lsquo;cp&amp;rsquo;, &amp;lsquo;measure&amp;rsquo;] &amp;lt;- &amp;lsquo;$C_p$&amp;rsquo;
if(&amp;ldquo;bic&amp;rdquo; %in% criterion) df[df[&amp;lsquo;measure&amp;rsquo;] == &amp;lsquo;bic&amp;rsquo;, &amp;lsquo;measure&amp;rsquo;] &amp;lt;- &amp;lsquo;$BIC$&amp;rsquo;&lt;/p&gt;
&lt;p&gt;p &amp;lt;- ggplot(df, aes(variable, factor(round(value)))) +
geom_tile(aes(fill = is_in)) +
facet_wrap(~ measure, scales = &amp;ldquo;free&amp;rdquo;) +
scale_fill_manual(&amp;quot;&amp;quot;, values = c(&amp;ldquo;TRUE&amp;rdquo; = &amp;ldquo;black&amp;rdquo;, &amp;ldquo;FALSE&amp;rdquo; = &amp;ldquo;white&amp;rdquo;), guide = FALSE) +
labs(x = &amp;ldquo;&amp;quot;, y = &amp;ldquo;&amp;quot;)
return(p)
}&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;/p&amp;gt;
&amp;lt;/details&amp;gt;

&amp;lt;details&amp;gt;
&amp;lt;summary&amp;gt;Plot criteria for model selection&amp;lt;/summary&amp;gt;
&amp;lt;p&amp;gt;
```{r}
ggcriteria &amp;lt;- function(x, criterion = &amp;quot;bic&amp;quot;){
  require(dplyr); require(ggplot2); require(tidyr)
  if(inherits(x, &amp;quot;regsubsets&amp;quot;)) x &amp;lt;- summary(x)
  if(!inherits(x, &amp;quot;summary.regsubsets&amp;quot;))
    stop(&amp;quot;The input to ggregsubsets() should be the result of regsubsets().&amp;quot;)
  
  if(&amp;quot;rsq&amp;quot; == criterion) crit &amp;lt;- &#39;$R^2$&#39;
  if(&amp;quot;rss&amp;quot; == criterion) crit &amp;lt;- &#39;$RSS$&#39;
  if(&amp;quot;adjr2&amp;quot; == criterion) crit &amp;lt;- &#39;Adjusted $R^2$&#39;
  if(&amp;quot;cp&amp;quot; == criterion) crit &amp;lt;- &#39;$C_p$&#39;
  if(&amp;quot;bic&amp;quot; == criterion) crit &amp;lt;- &#39;$BIC$&#39;
  
  if((criterion == &amp;quot;adjr2&amp;quot;) | (criterion == &amp;quot;rsq&amp;quot;)) m &amp;lt;- which.max(x[[criterion]])
  else m &amp;lt;- which.min(x[[criterion]])
  
  p &amp;lt;- ggplot() +
    geom_line(aes(x = seq(1, length(x[[criterion]])), y = x[[criterion]])) + 
    geom_point(aes(x = m, y = x[[criterion]][m]), col = &#39;red&#39;, size = 3) +
    xlab(&#39;Number of variables&#39;) +
    scale_x_continuous(breaks = seq(1, length(x[[criterion]])), minor_breaks = NULL) +
    ylab(crit)
  return(p)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/p&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;Plot cross-validation error from `cv.glmnet` function&lt;/summary&gt;
&lt;p&gt;
```{r}
ggcv.glmnet &lt;- function(x){
  require(dplyr); require(ggplot2); require(glmnet)
  if(!inherits(x, &#34;cv.glmnet&#34;))
    stop(&#34;The input of ggcv.glmnet() should be the result og cv.glmnet().&#34;)
&lt;p&gt;df &amp;lt;- tibble(lambda = log(x$lambda), cvm = x$cvm, cvsd = x$cvsd)
p &amp;lt;- ggplot(df, aes(lambda, cvm, ymin = cvm - cvsd, ymax = cvm + cvsd)) +
geom_point(col = &amp;lsquo;red&amp;rsquo;) +
geom_errorbar() +
geom_vline(aes(xintercept = df$lambda[which.min(df$cvm)]), col = &amp;lsquo;blue&amp;rsquo;, linetype = 2) +
xlab(&amp;lsquo;$\log(\lambda)$&amp;rsquo;) +
ylab(&amp;lsquo;Mean-Squared Error&amp;rsquo;)
return(p)
}&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;/p&amp;gt;
&amp;lt;/details&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Titanic: Machine Learning from Disaster</title>
      <link>/project/titanic/</link>
      <pubDate>Thu, 22 Nov 2018 00:00:00 +0000</pubDate>
      <guid>/project/titanic/</guid>
      <description>&lt;h2 id=&#34;context&#34;&gt;Context&lt;/h2&gt;
&lt;p&gt;The sinking of the RMS Titanic is one of the most infamous shipwrecks in
history. On April 15, 1912, during her maiden voyage, the Titanic sank
after colliding with an iceberg, killing 1502 out of 2224 passengers and
crew. This sensational tragedy shocked the international community and
led to better safety regulations for ships.&lt;/p&gt;
&lt;p&gt;One of the reasons that the shipwreck led to such loss of life was that
there were not enough lifeboats for the passengers and crew. Although
there was some element of luck involved in surviving the sinking, some
groups of people were more likely to survive than others, such as women,
children, and the upper-class.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;variables-description&#34;&gt;Variables description&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Variable Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;PassengerId&lt;/td&gt;
&lt;td&gt;Passengerâs Id&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Survived&lt;/td&gt;
&lt;td&gt;Survived (1) or died (0)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Pclass&lt;/td&gt;
&lt;td&gt;Passengerâs class&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Name&lt;/td&gt;
&lt;td&gt;Passengerâs name&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Sex&lt;/td&gt;
&lt;td&gt;Passengerâs sex&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Age&lt;/td&gt;
&lt;td&gt;Passengerâs age&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SibSp&lt;/td&gt;
&lt;td&gt;Number of siblings/spouses aboard&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Parch&lt;/td&gt;
&lt;td&gt;Number of parents/children aboard&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ticket&lt;/td&gt;
&lt;td&gt;Ticket number&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Fare&lt;/td&gt;
&lt;td&gt;Passenger Fare&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Cabin&lt;/td&gt;
&lt;td&gt;Cabin&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Embarked&lt;/td&gt;
&lt;td&gt;Port of embarkation (C = Cherbourg; Q = Queenstown; S = Southampton)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;SPECIAL NOTES&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Pclass&lt;/em&gt; is a proxy for socio-economic status (SES): 1st ~ Upper; 2nd
~ Middle; 3rd ~ Lower.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Age&lt;/em&gt; is in Years; fractional if &lt;em&gt;Age&lt;/em&gt; is less than One (1). If the
&lt;em&gt;Age&lt;/em&gt; is estimated, it is in the form xx.5.&lt;/p&gt;
&lt;p&gt;With respect to the family relation variables (i.e. &lt;em&gt;sibsp&lt;/em&gt; and &lt;em&gt;parch&lt;/em&gt;)
some relations were ignored. The following are the definitions used for
&lt;em&gt;sibsp&lt;/em&gt; and &lt;em&gt;parch&lt;/em&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sibling: Brother, Sister, Stepbrother, or Stepsister of Passenger
Aboard Titanic;&lt;/li&gt;
&lt;li&gt;Spouse: Husband or Wife of Passenger Aboard Titanic (Mistresses and
Fiances Ignored);&lt;/li&gt;
&lt;li&gt;Parent: Mother or Father of Passenger Aboard Titanic;&lt;/li&gt;
&lt;li&gt;Child: Son, Daughter, Stepson, or Stepdaughter of Passenger Aboard
Titanic.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Other family relatives excluded from this study include cousins,
nephews/nieces, aunts/uncles, and in-laws. Some children travelled only
with a nanny, therefore &lt;em&gt;parch&lt;/em&gt; = 0 for them. As well, some travelled
with very close friends or neighbors in a village, however, the
definitions do not support such relations.&lt;/p&gt;
&lt;h2 id=&#34;load-the-data&#34;&gt;Load the data&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;train &amp;lt;- read_csv(&#39;train.csv&#39;)
test &amp;lt;- read_csv(&#39;test.csv&#39;)

titanic &amp;lt;- train %&amp;gt;% 
            bind_rows(test) %&amp;gt;%
            select(-PassengerId) %&amp;gt;%
            mutate_at(vars(Pclass, Sex, Embarked), funs(factor(.)))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The train dataset has 891 observations and 12 variables. The test
dataset has 418 observations and 11 variables. We want to use the
&lt;code&gt;train&lt;/code&gt; dataset to learn if a passenger survived given the different
variables, and then predict the fate of the passenger into the &lt;code&gt;test&lt;/code&gt;
dataset.&lt;/p&gt;
&lt;h2 id=&#34;exploratory-data-analysis&#34;&gt;Exploratory Data Analysis&lt;/h2&gt;
&lt;h3 id=&#34;passengers-class&#34;&gt;Passengerâs class&lt;/h3&gt;
&lt;p&gt;There is no missing values into the &lt;em&gt;PClass&lt;/em&gt; variable. Half of the
passenger are in the third class.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;class-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;passengers-sex&#34;&gt;Passengerâs sex&lt;/h3&gt;
&lt;p&gt;There is almost twice men than women.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;sex-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;passengers-name&#34;&gt;Passengerâs name&lt;/h3&gt;
&lt;p&gt;This variable, obviously, confirm the high number of men compare to the
number of women. But it carry another piece of information: more than
the half of the women on the Titanic are not married (the &lt;code&gt;Miss&lt;/code&gt;
factor). It is probably due to the children.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Extract the title from the Passenger&#39;s name.
Title &amp;lt;- &amp;quot;^.*, (.*?)\\..*$&amp;quot; %&amp;gt;% 
          gsub(&amp;quot;\\1&amp;quot;, titanic$Name)
# Create another factors for low represented title.
title_high &amp;lt;- c(&#39;Mr&#39;, &#39;Miss&#39;, &#39;Mrs&#39;, &#39;Master&#39;)
Title &amp;lt;- Title %in% title_high %&amp;gt;%
          if_else(Title, &#39;Other&#39;)
# Add titlecolumn to the dataframe
titanic &amp;lt;- titanic %&amp;gt;% 
            add_column(Title) %&amp;gt;%
            mutate_at(vars(Title), funs(factor(.)))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;name-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;passengers-port-of-embarkation&#34;&gt;Passengerâs port of embarkation&lt;/h3&gt;
&lt;p&gt;1 % of the passengers embarked in Southampton. We do not known the port
of embarkation for only 2 persons. So, we will try to infer these
missing values.&lt;/p&gt;
&lt;p&gt;First, letâs take a look at the 2 passengers with missing port of
embarkation.&lt;/p&gt;
&lt;table class=&#34;table table-striped table-hover table-condensed&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
Survived
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
Pclass
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
Name
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
Sex
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
Age
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
SibSp
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
Parch
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
Ticket
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
Fare
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
Cabin
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
Embarked
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
Title
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
1
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Icard, Miss. Amelie
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
female
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
38
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
113572
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
80
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
B28
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
NA
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Miss
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
1
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Stone, Mrs. George Nelson (Martha Evelyn)
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
female
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
62
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
113572
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
80
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
B28
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
NA
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Mrs
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Miss. Icard and Mrs. Stone paid 80$ and was in first class. Letâs plot a
boxplot to determine the median fare depending on the port of
embarkation for the first class.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;plot_missing_embarked-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;There are only 3 passengers that embarked in Queenstown in first class.
There fare was 90$. Moreover, they were part of the same family. So,
considering the boxplot, we might think that the port of embarkation of
Miss. Icard and Mrs. Stone were Cherbourg.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;titanic[62, &amp;quot;Embarked&amp;quot;] &amp;lt;- &amp;quot;C&amp;quot;
titanic[830, &amp;quot;Embarked&amp;quot;] &amp;lt;- &amp;quot;C&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;port-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;passengers-fare&#34;&gt;Passengerâs fare&lt;/h3&gt;
&lt;p&gt;There is only 1 person with a missing in the all dataset. The mean fare
is 33$ and the median fare 14$ for a ticket on the Titanic. Letâs look
at the person with a missing fare.&lt;/p&gt;
&lt;table class=&#34;table table-striped table-hover table-condensed&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
Survived
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
Pclass
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
Name
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
Sex
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
Age
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
SibSp
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
Parch
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
Ticket
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
Fare
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
Cabin
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
Embarked
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
Title
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
NA
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
3
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Storey, Mr. Thomas
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
male
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
60.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
3701
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
NA
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
NA
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
S
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Mr
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Letâs plot a kernel density estimator of the fare for the person with
the same characteristics than Mr. Storey (embarked in Southampton in
third class).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;plot_fare-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;The median for the third class and the embarkment in Southampton is 8$.
So, we might think that Mr. Storey has paid the median fare of the
people from the third class who embarked in Southampton.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;titanic[1044, &amp;quot;Fare&amp;quot;] &amp;lt;- titanic %&amp;gt;% filter(Embarked == &#39;S&#39;, Pclass == 3) %&amp;gt;% pull(Fare) %&amp;gt;% median(na.rm = TRUE)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;passengers-age&#34;&gt;Passengerâs age&lt;/h3&gt;
&lt;p&gt;There are 263 persons without &lt;em&gt;Age&lt;/em&gt; in the dataset. The mean age is 29.9
years old.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;plot_age-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Since there are a lot of missing values, we are going to input these
ones using a ridge regression (
&lt;a href=&#34;https://cran.r-project.org/web/packages/glmnet/glmnet.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;glmnet_
package&lt;/a&gt;
).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Split the dataset into the ones with Age and the ones without Age.
titanic.with.age &amp;lt;- titanic %&amp;gt;% 
  filter(!is.na(Age)) %&amp;gt;%
  select(-c(Survived, Name, Ticket, Cabin))
titanic.without.age &amp;lt;- titanic %&amp;gt;%
  filter(is.na(Age)) %&amp;gt;%
  select(-c(Survived, Name, Ticket, Cabin)) %&amp;gt;%
  mutate(Age = 0)

# Build a model matrix of the data
titanic.lm &amp;lt;- lm(Age ~ ., data = titanic.with.age)
titanic.with.age.model.matrix &amp;lt;- model.matrix(titanic.lm, data = titanic.with.age)[,-1]
# Perform the Ridge Regression (alpha = 0)
titanic.age.model &amp;lt;- glmnet(titanic.with.age.model.matrix, titanic.with.age$Age, alpha = 0)

# Prediction of the Age 
titanic.without.age$Age &amp;lt;- predict(titanic.age.model, 
  newx = model.matrix(titanic.lm, data = titanic.without.age)[, -1],
  s = cv.glmnet(titanic.with.age.model.matrix, titanic.with.age$Age, alpha = 0)$lambda.min,
  type = &#39;link&#39;)

# Replace the missing Age into the all dataset
titanic[is.na(titanic$Age), &amp;quot;Age&amp;quot;] &amp;lt;- titanic.without.age$Age
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Letâs check the new density estimator for the &lt;em&gt;Age&lt;/em&gt; to ensure that
things still look good. (Careful, one person with a predicted negative
age!)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;plot_age2-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;number-of-siblingsspouses-aboard&#34;&gt;Number of siblings/spouses aboard&lt;/h3&gt;
&lt;p&gt;There is no missing value for the variable &lt;em&gt;SipSp&lt;/em&gt; in the dataset. A
majority if the passengers does not have siblings or spouses aboard.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;plot_sipsp-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;number-of-parentschildren-aboard&#34;&gt;Number of parents/children aboard&lt;/h3&gt;
&lt;p&gt;There is no missing value for the variable &lt;em&gt;Parch&lt;/em&gt; in the dataset. A
majority if the passengers does not have parents or children aboard.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;plot_parch-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;passengers-cabin&#34;&gt;Passengerâs cabin&lt;/h3&gt;
&lt;p&gt;There are 1014 missing values for the &lt;em&gt;Cabin&lt;/em&gt; variable. So, 77% of the
observations are missing. We decided to delete this features from the
dataset.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;titanic &amp;lt;- titanic %&amp;gt;% select(-Cabin)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;passengers-ticket&#34;&gt;Passengerâs ticket&lt;/h3&gt;
&lt;p&gt;There are 0 missing values for the &lt;em&gt;Ticket&lt;/em&gt; variable. But, there are 929
different values. Thus, we also delete this feature from the dataset
because almost every passenger has a different Ticket.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;titanic &amp;lt;- titanic %&amp;gt;% select(-Ticket)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;prediction-of-the-survivors&#34;&gt;Prediction of the survivors&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;train &amp;lt;- titanic %&amp;gt;% select(-Name) %&amp;gt;% filter(!is.na(Survived))
test &amp;lt;- titanic %&amp;gt;% select(-Name) %&amp;gt;% filter(is.na(Survived))

# Split the train set into two dataset (for validation)
set.seed(42)
sample &amp;lt;- sample(c(TRUE, FALSE), nrow(train), replace = TRUE, prob = c(2/3, 1/3))
train.val &amp;lt;- train[sample, ]
test.val &amp;lt;- train[!sample, ]

# Perform Ridge regression
train.lm &amp;lt;- lm(Survived ~ ., data = train.val)
X &amp;lt;- model.matrix(train.lm, data = train.val)[ , -1]
Y &amp;lt;- train.val$Survived
train.ridge.model &amp;lt;- glmnet(X, Y, alpha = 0, family = &#39;binomial&#39;)

# Prediction on the test.val set
test.val.predict &amp;lt;- predict(train.ridge.model, 
                            s = cv.glmnet(X, Y, alpha = 0)$lambda.min,
                            newx = model.matrix(train.lm, data = test.val)[ , -1],
                            type = &#39;class&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;On the validation set, there are 0.14% of missclassified passengers.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Prediction of the test set
test$Survived &amp;lt;- 0
test.predict &amp;lt;- predict(train.ridge.model, 
                        s = cv.glmnet(X, Y, alpha = 0)$lambda.min,
                        newx = model.matrix(train.lm, data = test)[ , -1],
                        type = &#39;class&#39;) 

# Construt the dataframe
result &amp;lt;- data.frame(PassengerID = row.names(test.predict),
                     Survived = test.predict[ , 1])

# Export as CSV
write.csv(result, &#39;results.csv&#39;, row.names = FALSE)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>

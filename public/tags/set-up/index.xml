<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Set up | TwentyFourSecs</title>
    <link>/tags/set-up/</link>
      <atom:link href="/tags/set-up/index.xml" rel="self" type="application/rss+xml" />
    <description>Set up</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Â© 2020 Steven Golovkine. All Rights Reserved</copyright><lastBuildDate>Mon, 30 Dec 2019 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/img/pic.jpg</url>
      <title>Set up</title>
      <link>/tags/set-up/</link>
    </image>
    
    <item>
      <title>Set up Julia</title>
      <link>/post/set-up-julia/</link>
      <pubDate>Mon, 30 Dec 2019 00:00:00 +0000</pubDate>
      <guid>/post/set-up-julia/</guid>
      <description>&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://julialang.org&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Julia&lt;/a&gt;
 can be installed on MacOS using Homebrew.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew cask install julia
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;jupyter-kernel&#34;&gt;Jupyter kernel&lt;/h2&gt;
&lt;p&gt;The installation of the Julia kernel for Jupyter is straightforward following this 
&lt;a href=&#34;https://github.com/JuliaLang/IJulia.jl/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;link&lt;/a&gt;
.&lt;/p&gt;
&lt;p&gt;On MacOS, from a Terminal, run &lt;code&gt;julia&lt;/code&gt; to launch a Julia session. Then, run the following commands:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;using Pkg
Pkg.add(&amp;quot;IJulia&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Set up Hive</title>
      <link>/post/set-up-hive/</link>
      <pubDate>Sun, 09 Dec 2018 00:00:00 +0000</pubDate>
      <guid>/post/set-up-hive/</guid>
      <description>&lt;h2 id=&#34;set-up-on-macos&#34;&gt;Set up on MacOs&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s install &lt;strong&gt;Hive&lt;/strong&gt; with &lt;strong&gt;Homebrew.&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install hive
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;strong&gt;Hive&lt;/strong&gt;&amp;lsquo;s files are in the folder &lt;code&gt;/usr/local/Cellar/hive/*&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Same as &lt;strong&gt;Hadoop&lt;/strong&gt;, add some environment variables to the &lt;code&gt;.bashrc&lt;/code&gt;file.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Hive environment
export HIVE_HOME=/usr/local/Cellar/hive/*/libexec
PATH=$HIVE_HOME/bin:$PATH
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In order to launch Hive, Hadoop ressources must be set up.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Setup Hadoop
$HADOOP_HOME/sbin/start-dfs.sh
$HADOOP_HOME/sbin/start-yarn.sh
# Launch Hive
hive
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;common-errors&#34;&gt;Common errors&lt;/h2&gt;
&lt;h3 id=&#34;metastore-troubles&#34;&gt;Metastore troubles&lt;/h3&gt;
&lt;p&gt;Just remove and reload the metastore.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rm -rf metastore_db derby.log
$HIVE_HOME/bin/schematool -initSchema -dbType derby
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Set up Spark</title>
      <link>/post/set-up-spark/</link>
      <pubDate>Sun, 09 Dec 2018 00:00:00 +0000</pubDate>
      <guid>/post/set-up-spark/</guid>
      <description>&lt;h2 id=&#34;set-up-on-macos&#34;&gt;Set up on MacOs&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s install &lt;strong&gt;Spark&lt;/strong&gt; with &lt;strong&gt;Homebrew.&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install apache-spark
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;strong&gt;Spark&lt;/strong&gt;&amp;lsquo;s files are in the folder &lt;code&gt;/usr/local/Cellar/apache-spark/*&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Same as &lt;strong&gt;Hadoop&lt;/strong&gt;, add some environment variables to the &lt;code&gt;.bashrc&lt;/code&gt;file.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Spark environment
export SPARK_HOME=/usr/local/Cellar/apache-spark/*/libexec
PATH=$SPARK_HOME/bin:$PATH
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;configure-spark-to-run-with-yarn&#34;&gt;Configure Spark to run with YARN&lt;/h2&gt;
&lt;p&gt;Edit the file &lt;code&gt;$SPARK_HOME/conf/spark-env.sh.template&lt;/code&gt; by adding the following line:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;HADOOP_CONF_DIR=$HADOOP_HOME/etc/hadoop
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And then rename it as &lt;code&gt;spark-env.sh&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Finally, you can run the Spark command lines on YARN with the command:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;spark-shell --master yarn --deploy-mode client
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Set up Hadoop</title>
      <link>/post/hadoop/</link>
      <pubDate>Sat, 08 Dec 2018 00:00:00 +0000</pubDate>
      <guid>/post/hadoop/</guid>
      <description>&lt;h2 id=&#34;hadoop-deployment-modes&#34;&gt;Hadoop deployment modes&lt;/h2&gt;
&lt;p&gt;There are three ways to deploy Hadoop:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Local mode&lt;/li&gt;
&lt;li&gt;Pseudo-distributed mode&lt;/li&gt;
&lt;li&gt;Distributed mode&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;requisites-to-the-installation&#34;&gt;Requisites to the installation&lt;/h2&gt;
&lt;h3 id=&#34;java&#34;&gt;Java&lt;/h3&gt;
&lt;p&gt;Check if &lt;strong&gt;Java&lt;/strong&gt; is installed:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;java -version
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It should return something like that:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;java version &amp;quot;1.8.0_***&amp;quot;
Java(TM) SE Runtime Environment (build 1.8.0_***-b11)
Java HotSpot(TM) 64-Bit Server VM (build 25.***-b11, mixed mode)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If not, you could go on 
&lt;a href=&#34;https://www.java.com/fr/download/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;java.com&lt;/a&gt;
 and download it.&lt;/p&gt;
&lt;h3 id=&#34;ssh&#34;&gt;SSH&lt;/h3&gt;
&lt;p&gt;On MacOS, the &lt;strong&gt;Remote Login&lt;/strong&gt; must be enable to authorise SSH. It is located in &lt;strong&gt;Systeme Preference&lt;/strong&gt; and &lt;strong&gt;Sharing&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Try to ssh to &lt;em&gt;localhost&lt;/em&gt; without a passphrase/password. This is important because we do not want to enter a passphrase/password every time Hadoop connect to a node.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ssh localhost
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you can not, run these commands to create a key and put it into the authorised one to connect.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ssh-keygen -t rsa -P &amp;quot;&amp;quot;
cat ~/.ssh/id_rsa.pub &amp;gt;&amp;gt; ~/.ssh/authorized_keys
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;set-up-on-macos&#34;&gt;Set up on MacOs&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s install Hadoop with Homebrew.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install hadoop
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As a result, we see where are Hadoop&amp;rsquo;s config files:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/usr/local/opt/hadoop/libexec/etc/hadoop/hadoop-env.sh
/usr/local/opt/hadoop/libexec/etc/hadoop/mapred-env.sh
/usr/local/opt/hadoop/libexec/etc/hadoop/yarn-env.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Moreover, the &lt;code&gt;JAVA_HOME&lt;/code&gt; has been set to the result of the command &lt;code&gt;/usr/libexec/java_home&lt;/code&gt;.
And finally, the Hadoop&amp;rsquo;s files are in the folder &lt;code&gt;/usr/local/Cellar/hadoop/*&lt;/code&gt;.
Now, in order to simplify the commands, it is common to add some environment variables to the &lt;code&gt;.bashrc&lt;/code&gt; file.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Hadoop environment
export HADOOP_HOME=/usr/local/Cellar/hadoop/*/libexec
PATH=$HADOOP_HOME/bin:$PATH
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;configure-hdfs-for-the-pseudo-distributed-mode&#34;&gt;Configure HDFS for the Pseudo-Distributed mode&lt;/h3&gt;
&lt;h4 id=&#34;use-a-single-datanode-for-each-block&#34;&gt;Use a single DataNode for each block&lt;/h4&gt;
&lt;p&gt;Add the following lines to the file &lt;code&gt;$HADOOP_HOME/etc/hadoop/hdfs-site.xml&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;configuration&amp;gt;
  &amp;lt;property&amp;gt;
    &amp;lt;name&amp;gt;dfs.replication&amp;lt;/name&amp;gt;
    &amp;lt;value&amp;gt;1&amp;lt;/value&amp;gt;
  &amp;lt;/property&amp;gt;
&amp;lt;/configuration&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;configure-the-namenode-port&#34;&gt;Configure the NameNode port&lt;/h4&gt;
&lt;p&gt;Add the following lines to the file &lt;code&gt;$HADOOP_HOME/etc/hadoop/core-site.xml&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;configuration&amp;gt;
  &amp;lt;property&amp;gt;
    &amp;lt;name&amp;gt;fs.defaultFS&amp;lt;/name&amp;gt;
    &amp;lt;value&amp;gt;hdfs://localhost:9000&amp;lt;/value&amp;gt;
  &amp;lt;/property&amp;gt;
&amp;lt;/configuration&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;set-the-runtime-framework-for-executing-mapreduce-jobs&#34;&gt;Set the runtime framework for executing MapReduce jobs&lt;/h4&gt;
&lt;p&gt;Add the following lines to the file &lt;code&gt;$HADOOP_HOME/etc/hadoop/mapred-site.xml&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;configuration&amp;gt;
  &amp;lt;property&amp;gt;
    &amp;lt;name&amp;gt;mapreduce.framework.name&amp;lt;/name&amp;gt;
    &amp;lt;value&amp;gt;yarn&amp;lt;/value&amp;gt;
  &amp;lt;/property&amp;gt;
&amp;lt;/configuration&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;implement-the-service-_mapreduce_shuffle_&#34;&gt;Implement the service &lt;em&gt;mapreduce_shuffle&lt;/em&gt;.&lt;/h4&gt;
&lt;p&gt;Add the following lines to the file &lt;code&gt;$HADOOP_HOME/etc/hadoop/yarn-site.xml&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;configuration&amp;gt;
  &amp;lt;property&amp;gt;
    &amp;lt;name&amp;gt;yarn.nodemanager.aux-services&amp;lt;/name&amp;gt;
    &amp;lt;value&amp;gt;mapreduce_shuffle&amp;lt;/value&amp;gt;
  &amp;lt;/property&amp;gt;
&amp;lt;/configuration&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;format-the-filesystem&#34;&gt;Format the filesystem&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hdfs namenode -format
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, you can start the NameNode and DataNode deamons.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$HADOOP_HOME/sbin/start-dfs.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It is possible to check if it&amp;rsquo;s working using the UI interface: 
&lt;a href=&#34;http://localhost:50070/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://localhost:50070/&lt;/a&gt;
 or 
&lt;a href=&#34;http://localhost:9870/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://localhost:9870/&lt;/a&gt;
.&lt;/p&gt;
&lt;p&gt;And start the Ressource and Node managers.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$HADOOP_HOME/sbin/start-yarn.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It is possible to check if it&amp;rsquo;s working using the UI interface: 
&lt;a href=&#34;http://localhost:8088/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://localhost:8088/&lt;/a&gt;
.&lt;/p&gt;
&lt;h2 id=&#34;common-errors&#34;&gt;Common Errors&lt;/h2&gt;
&lt;h3 id=&#34;incompatible-clusterids&#34;&gt;Incompatible clusterIDs&lt;/h3&gt;
&lt;p&gt;You should reformat the name node with the right clusterId.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hdfs namenode -format -clusterId CID-...
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Jupyter Notebook</title>
      <link>/post/jupyter-notebook/</link>
      <pubDate>Fri, 07 Dec 2018 00:00:00 +0000</pubDate>
      <guid>/post/jupyter-notebook/</guid>
      <description>&lt;h2 id=&#34;update-irkernel-after-updating-r&#34;&gt;Update IRkernel after updating R&lt;/h2&gt;
&lt;p&gt;Modify the file &lt;code&gt;kernel.json&lt;/code&gt; into the folder &lt;code&gt;~/Library/Jupyter/kernels/ir&lt;/code&gt;.
Replace the value of the argument &lt;code&gt;argv&lt;/code&gt; by the new path of R.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Homebrew</title>
      <link>/post/homebrew/</link>
      <pubDate>Thu, 06 Dec 2018 00:00:00 +0000</pubDate>
      <guid>/post/homebrew/</guid>
      <description>&lt;p&gt;
&lt;a href=&#34;https://brew.sh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Homebrew&lt;/a&gt;
 names itself as &lt;em&gt;the missing package manager for macOS&lt;/em&gt;. It simplifies the installation and the management of the different softwares you could have.&lt;/p&gt;
&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;
&lt;p&gt;First, you need to have the &lt;strong&gt;Command Line Tools&lt;/strong&gt; for &lt;strong&gt;Xcode&lt;/strong&gt;. The installation of &lt;strong&gt;Xcode&lt;/strong&gt; is made from the App Store. Once it is done, you can install the &lt;strong&gt;Command Line Tools&lt;/strong&gt; using the following command in the terminal:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;xcode-select --install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, you should launch the following command to have &lt;strong&gt;Homebrew&lt;/strong&gt; installed:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ruby -e &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After, you should tell to the system to take into consideration programs installed by &lt;strong&gt;Homebrew&lt;/strong&gt; rather than the system default. By default, &lt;strong&gt;Homebrew&lt;/strong&gt; uses the &lt;code&gt;/usr/local/bin&lt;/code&gt; path. We do this by the adding this path to the &lt;code&gt;$PATH&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &#39;export PATH=&amp;quot;/usr/local/bin/:$PATH&amp;quot;&#39; &amp;gt;&amp;gt; ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;
&lt;p&gt;We install and uninstall a formula by using the commands:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install &amp;lt;formula&amp;gt;
brew uninstall &amp;lt;formula&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To upgrade all the formulae, run:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew update
brew upgrade
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To list all the formulae you have with their version, run:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew list --versions
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, &lt;strong&gt;Homebrew&lt;/strong&gt; keeps a trace of the previous versions of each of the formula (if you want to get it back). If you want to delete it, run:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew cleanup
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;cask&#34;&gt;Cask&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://caskroom.github.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Homebrew-Cask&lt;/a&gt;
 extends &lt;strong&gt;Homebrew&lt;/strong&gt; and allows to install software using command-line tools.&lt;/p&gt;
&lt;p&gt;To look for a software, run:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew cask search &amp;lt;formula&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To install/uninstall a software, run:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew cask install &amp;lt;formula&amp;gt;
brew cask uninstall &amp;lt;formula&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To know the outdated formulae, run:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew cask outdated
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And then, for update the package, run:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew cask reinstall &amp;lt;formula&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>MySQL</title>
      <link>/post/mysql/</link>
      <pubDate>Thu, 06 Dec 2018 00:00:00 +0000</pubDate>
      <guid>/post/mysql/</guid>
      <description>&lt;p&gt;
&lt;a href=&#34;https://www.mysql.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MySQL&lt;/a&gt;
 is an open-source relational database management system.&lt;/p&gt;
&lt;h2 id=&#34;installation-and-configurations&#34;&gt;Installation and configurations&lt;/h2&gt;
&lt;p&gt;We simply use &lt;strong&gt;Homebrew&lt;/strong&gt; to install &lt;strong&gt;MySQL&lt;/strong&gt; under MacOS.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install mysql
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, we can launch &lt;strong&gt;MySQL&lt;/strong&gt; by running the command:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew services start mysql
# ==&amp;gt; Successfully started &#39;mysql&#39; (label: homebrew.mxcl.mysql)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One can recommended to set a password for the &lt;em&gt;root&lt;/em&gt; user and only authorize the access from &lt;em&gt;localhost&lt;/em&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mysql_secure_installation
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And then, we re-launch &lt;strong&gt;MySQL&lt;/strong&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew services restart mysql
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;connection&#34;&gt;Connection&lt;/h2&gt;
&lt;p&gt;We connect to &lt;strong&gt;MySQL&lt;/strong&gt; by running the commands:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mysql --host=localhost --user=root -p
# Enter password : ****
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It is not recommended to work in &lt;em&gt;root&lt;/em&gt; on databases because this user has all privileges. One could create a restrictive user of the database.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;GRANT ALL PRIVILEGES ON nom_base.* TO &#39;name&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;password&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One can save the database into a file using the command:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mysqldump -u user -p --opt database_name &amp;gt; save.sql
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;configuration&#34;&gt;Configuration&lt;/h2&gt;
&lt;p&gt;In order to use every possible characters into the string in the database, one should activate the UTF-8 encode.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mysql --host=localhost --user=name -p --default_character-set=utf8
# Enter password : ****
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In order to insert data into the database using external files, one should activate this possibility.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mysql -h localhost -u name -p --enable-local-infile
# Enter password : ****
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Set up Python</title>
      <link>/post/set-up-python/</link>
      <pubDate>Thu, 06 Dec 2018 00:00:00 +0000</pubDate>
      <guid>/post/set-up-python/</guid>
      <description>&lt;p&gt;
&lt;a href=&#34;https://www.python.org&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Python&lt;/a&gt;
 is already installed on macOS. But as we do not want to mess with it, and have more flexibility, we will install our own version of &lt;strong&gt;Python&lt;/strong&gt;. This post is based on this 
&lt;a href=&#34;https://medium.com/@henriquebastos/the-definitive-guide-to-setup-my-python-workspace-628d68552e14&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;post&lt;/a&gt;
 by Henrique Bastos on Medium.&lt;/p&gt;
&lt;h2 id=&#34;wanted-configurations&#34;&gt;Wanted configurations&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CPython 2.7&lt;/strong&gt; and &lt;strong&gt;CPython 3.7&lt;/strong&gt;, but it is possible to install other implementations like &lt;strong&gt;PyPy&lt;/strong&gt; or &lt;strong&gt;Anaconda&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Python3&lt;/strong&gt; as a default version for everything, but it must easily change to &lt;strong&gt;Python2&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;A &lt;em&gt;unique&lt;/em&gt; &lt;strong&gt;Jupyter Notebook/Lab&lt;/strong&gt; working with both &lt;strong&gt;Python2&lt;/strong&gt; and &lt;strong&gt;Python3&lt;/strong&gt;, and being able to detect the active virtual environment.&lt;/li&gt;
&lt;li&gt;A console &lt;em&gt;iPython&lt;/em&gt; for &lt;strong&gt;Python3&lt;/strong&gt; and one for &lt;strong&gt;Python2&lt;/strong&gt;, so no need to install it in every virtual environment of the projects.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;virtualenvwrapper&lt;/em&gt; to develop the different projects and change the context in one command.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;pyenv&lt;/em&gt; is probably the best way to install &lt;strong&gt;Python&lt;/strong&gt; on macOS. Everything should be installed in the common directory without interfering with the rest of the system. Moreover, it handles with a lot of &lt;strong&gt;Python&lt;/strong&gt; implementation such as &lt;strong&gt;CPython&lt;/strong&gt;, &lt;strong&gt;PyPy&lt;/strong&gt;, &lt;strong&gt;Anaconda&lt;/strong&gt;, etc. And all of that with only one command. Firstly, one should install &lt;em&gt;pyenv&lt;/em&gt; and two add-ons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;pyenv&lt;/em&gt; to install &lt;strong&gt;Python&lt;/strong&gt; implementations;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;pyenv-virtualenv&lt;/em&gt; to configure global environment;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;pyenv-virtualenvwrapper&lt;/em&gt; to work on projects.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install pyenv
brew install pyenv-virtualenv
brew install pyenv-virtualenvwrapper
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With &lt;em&gt;virtualenvwrapper&lt;/em&gt;, every &lt;em&gt;virtualenv&lt;/em&gt; will be kept in the same repository and every projects codes in an other.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Every virtual environment will be in ...
mkdir ~/.ve
# Every projects will be in ...
mkdir ~/Documents/Python/workspace
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We have to configure the &lt;em&gt;shell&lt;/em&gt; to initialise &lt;em&gt;pyenv&lt;/em&gt; at the opening of the terminal. Thus, we have to add the following lines into the file &lt;code&gt;~/.bashrc&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export WORKON_HOME=~/.ve
export PROJECT_HOME=~/Documents/Python/workspace
eval &amp;quot;$(pyenv init -)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Reload the terminal to take the changes into account.&lt;/p&gt;
&lt;p&gt;Next step is to install &lt;strong&gt;CPython 3.7.1&lt;/strong&gt; and &lt;strong&gt;CPython 2.7.15&lt;/strong&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pyenv install 3.7.1
pyenv install 2.7.15
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;configure-the-global-python-installation&#34;&gt;Configure the global Python installation&lt;/h2&gt;
&lt;p&gt;It is nice to use &lt;strong&gt;Python&lt;/strong&gt; written programs without using a virtual environment. Moreover, it is easier if we only have one &lt;em&gt;Jupyter Notebook/Lab&lt;/em&gt;, one &lt;em&gt;iPython console&lt;/em&gt; for &lt;strong&gt;Python 2&lt;/strong&gt;, one &lt;em&gt;iPython console&lt;/em&gt; for &lt;strong&gt;Python 3&lt;/strong&gt; and other tools.&lt;/p&gt;
&lt;p&gt;So, we use &lt;em&gt;pyenv-virtualenv&lt;/em&gt; to do that:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pyenv virtualenv 3.7.1 jupyter3
pyenv virtualenv 3.7.1 tools3
pyenv virtualenv 2.7.15 ipython2
pyenv virtualenv 2.7.15 tools2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Jupyter&lt;/em&gt; can handle with many kernels like &lt;strong&gt;Python 2&lt;/strong&gt;, &lt;strong&gt;Python 3&lt;/strong&gt;, &lt;strong&gt;R&lt;/strong&gt;, &lt;strong&gt;bash&lt;/strong&gt;, and some other. It allows only one &lt;em&gt;Jupyter&lt;/em&gt; installation.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Here, we just want to use &lt;strong&gt;Python2&lt;/strong&gt; and &lt;strong&gt;Python3&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let&amp;rsquo;s start with &lt;strong&gt;Python3&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pyenv activate jupyter3
pip install jupyter
pip install jupyterlab
python -m ipykernel install --user
pyenv deactivate
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s continue with &lt;strong&gt;Python2&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pyenv activate ipython2
pip install ipykernel
python -m ipykernel install --user
pyenv deactivate
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Note that when we install &lt;em&gt;Jupyter&lt;/em&gt; for &lt;strong&gt;Python3&lt;/strong&gt;, we install by default &lt;em&gt;iPython&lt;/em&gt; and the &lt;em&gt;kernel&lt;/em&gt;. For &lt;strong&gt;Python2&lt;/strong&gt;, we only need to install &lt;em&gt;iPython&lt;/em&gt; and the &lt;em&gt;kernel&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now, let&amp;rsquo;s install tools using &lt;strong&gt;Python3&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pyenv activate tools3
pip install youtube-dl rows
pyenv deactivate
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s install tools which do not work with &lt;strong&gt;Python3&lt;/strong&gt; but only with &lt;strong&gt;Python2&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pyenv activate tools2
pip install rename
pyenv deactivate
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, it is time to let all the &lt;strong&gt;Python&lt;/strong&gt; versions and the special virtual environments working together.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pyenv global 3.7.1 2.7.15 jupyter3 ipython2 tools3 tools2
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Note that this command put priority in the &lt;code&gt;$PATH&lt;/code&gt; environment variable. Thus, it is possible to reach the scripts without activating virtual environments.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;using-virtual-environment&#34;&gt;Using virtual environment&lt;/h2&gt;
&lt;p&gt;We use &lt;em&gt;pyenv-virtualenvwrapper&lt;/em&gt; to create the virtual environment for each project. Now, he have to add the line &lt;code&gt;pyenv virtualenvwrapper_lazy&lt;/code&gt; in the file &lt;code&gt;~/.bashrc&lt;/code&gt; and then reload the terminal. When we start a new session, &lt;em&gt;pyenv-virtualenvwrapper&lt;/em&gt; will install the necessary dependencies of &lt;em&gt;virtualenvwrapper&lt;/em&gt; if they are not here. It is possible to use commands from &lt;em&gt;virtualenvwrapper&lt;/em&gt; and every virtual environment will be created by using &lt;strong&gt;Python&lt;/strong&gt; implementations installed from &lt;em&gt;pyenv&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Some examples:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Let&amp;rsquo;s say I want a new project &lt;em&gt;proj3&lt;/em&gt; using &lt;strong&gt;Python3&lt;/strong&gt;. The command &lt;code&gt;mkproject proj3&lt;/code&gt; will create a new virtual environment using &lt;strong&gt;Python3&lt;/strong&gt; (by default) in the repository &lt;code&gt;~/.ve/proj3&lt;/code&gt; and a project repository &lt;code&gt;~/Documents/Python/workspace/proj3&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Let&amp;rsquo;s imagine I want to work on my project &lt;em&gt;proj3&lt;/em&gt;. Run the command &lt;code&gt;workon proj3&lt;/code&gt; will activate the virtual environment &lt;code&gt;~/.ve/proj3&lt;/code&gt; and change the working directory to &lt;code&gt;~/Documents/Python/workspace/proj3&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Let&amp;rsquo;s clone a project names &lt;em&gt;proj2&lt;/em&gt; in the directory &lt;code&gt;~/Documents/Python/workspace/proj2&lt;/code&gt;. So, I need a virtual environment for this project. Run the command &lt;code&gt;mkvirtualenv -a ~/Documents/Python/workspace/proj2 -p python2 proj2&lt;/code&gt; will create a virtual environment using &lt;strong&gt;Python2&lt;/strong&gt; in the directory &lt;code&gt;~/.ve/proj2&lt;/code&gt; linked to the project. Then, run &lt;code&gt;workon proj2&lt;/code&gt; will activate the virtual environment and change the working directory.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;using-jupyter-and-ipython-with-the-projects&#34;&gt;Using Jupyter and iPython with the projects&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;At the beginning, &lt;em&gt;Jupyter&lt;/em&gt; and &lt;em&gt;Console&lt;/em&gt; were parts of &lt;em&gt;iPython&lt;/em&gt; project which was only about &lt;strong&gt;Python&lt;/strong&gt;. But the evolution of the &lt;em&gt;Notebook&lt;/em&gt; allows to use more languages than just &lt;strong&gt;Python&lt;/strong&gt;. So, the developers decide to split the project: &lt;em&gt;Jupyter&lt;/em&gt; and &lt;em&gt;iPython&lt;/em&gt;. Now, &lt;em&gt;Notebook&lt;/em&gt; is part of &lt;em&gt;Jupyter&lt;/em&gt; and &lt;em&gt;Console&lt;/em&gt; is part of &lt;em&gt;iPython&lt;/em&gt; and the &lt;em&gt;Python kernel&lt;/em&gt; used by &lt;em&gt;Jupyter&lt;/em&gt; to launch &lt;strong&gt;Python&lt;/strong&gt; code.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So, &lt;em&gt;Jupyter&lt;/em&gt; do not detect the active virtual environment: it is the &lt;em&gt;iPython&lt;/em&gt; instance that &lt;em&gt;Jupyter&lt;/em&gt; initialize. The problem is that the &lt;em&gt;iPython&lt;/em&gt; virtual environment launches itself only in &lt;em&gt;interactive shell&lt;/em&gt; mode and not in &lt;em&gt;kernel&lt;/em&gt; mode. Otherwise, the code detection works correctly only if the &lt;strong&gt;Python&lt;/strong&gt; version of the active virtual environment and the &lt;strong&gt;Python&lt;/strong&gt; version launches by &lt;em&gt;iPython&lt;/em&gt; are the same.&lt;/p&gt;
&lt;p&gt;The solution is to customize the process of the &lt;em&gt;iPython&lt;/em&gt; start-up. To do that, we need a &lt;em&gt;iPython profile&lt;/em&gt; et launch a 
&lt;a href=&#34;https://gist.github.com/henriquebastos/270cff100cb303f3d74370489022446b&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;script&lt;/a&gt;
:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ipython profile create
curl -L http://hbn.link/hb-ipython-startup-script &amp;gt; ~/.ipython/profile_default/startup/00-venv-sitepackages.py
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So, no matter the mode in which &lt;em&gt;iPython&lt;/em&gt; is launched, the &lt;em&gt;site-packages&lt;/em&gt; of the virtual environment will be available in the &lt;code&gt;PYTHONPATH&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Back to &lt;em&gt;proj3&lt;/em&gt;, after run &lt;code&gt;workon proj3&lt;/code&gt;, it is possible to execute &lt;code&gt;iPython&lt;/code&gt; to be in the interactive mode, or &lt;code&gt;jupyter-notebook&lt;/code&gt; to use the notebook.&lt;/p&gt;
&lt;h2 id=&#34;updating-the-package-with-pip&#34;&gt;Updating the package with pip&lt;/h2&gt;
&lt;p&gt;In order to update the different &lt;strong&gt;Python&lt;/strong&gt; packages, run the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip list --outdated | cut -d &amp;quot; &amp;quot; -f 1 | xargs -n1 pip install -U
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Set up R</title>
      <link>/post/set-up-r/</link>
      <pubDate>Wed, 05 Dec 2018 00:00:00 +0000</pubDate>
      <guid>/post/set-up-r/</guid>
      <description>&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://cran.r-project.org&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;R&lt;/strong&gt;&lt;/a&gt;
 is very easy to install on MacOS.&lt;/p&gt;
&lt;p&gt;The first thing to do is to add &lt;strong&gt;R&lt;/strong&gt; to the available formulae in &lt;strong&gt;Homebrew&lt;/strong&gt;. And then, install &lt;strong&gt;R&lt;/strong&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew tap homebrew/science
brew install r
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It could be necessary to install &lt;strong&gt;XQuartz&lt;/strong&gt; to use &lt;strong&gt;R&lt;/strong&gt; (but it is also possible that it is installed by default)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew cask install xquartz
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A nice GUI to use with &lt;strong&gt;R&lt;/strong&gt; is &lt;strong&gt;Rstudio&lt;/strong&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew cask install rstudio
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;jupyter-kernel&#34;&gt;Jupyter kernel&lt;/h2&gt;
&lt;p&gt;The installation of the &lt;strong&gt;R&lt;/strong&gt; kernel for Jupyter is straightforward following this 
&lt;a href=&#34;https://irkernel.github.io/installation/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;link&lt;/a&gt;
.&lt;/p&gt;
&lt;p&gt;On MacOS, from a Terminal, run &lt;code&gt;R&lt;/code&gt; to launch a &lt;strong&gt;R&lt;/strong&gt; session. Then, run the following commands:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&#39;IRKernel&#39;) # Install the package
IRKernel::installspec() # Make Jupyter to see the R kernel
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;configuration-of-the-proxies&#34;&gt;Configuration of the proxies&lt;/h2&gt;
&lt;p&gt;How to install packages if you have to deal with proxies? First, you should know the repository where &lt;strong&gt;R&lt;/strong&gt; is installed.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;R.home()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And then, you have to add to the file &lt;code&gt;${R_HOME}/etc/Renviron&lt;/code&gt; the lines:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;http_proxy=http://&amp;lt;user_name&amp;gt;:&amp;lt;password&amp;gt;@&amp;lt;host&amp;gt;:&amp;lt;port&amp;gt;/
https_proxy=https://&amp;lt;user_name&amp;gt;:&amp;lt;password&amp;gt;@&amp;lt;host&amp;gt;:&amp;lt;port&amp;gt;/
ftp_proxy=ftp://&amp;lt;user_name&amp;gt;:&amp;lt;password&amp;gt;@&amp;lt;host&amp;gt;:&amp;lt;port&amp;gt;/
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;some-modification-to-functions&#34;&gt;Some modification to functions&lt;/h2&gt;
&lt;h3 id=&#34;summary-functions&#34;&gt;Summary functions&lt;/h3&gt;
&lt;details&gt;
&lt;summary&gt;Dataframe summary&lt;/summary&gt;
&lt;p&gt;
```{r}
summary_df &lt;- function(df){
  # Function that get a dataframe as input and return a list with two entries.
  # One entry is for factor variables, which is a list that count the factors.
  # The other entry is for numeric variables, which contains statistics on it.
  result &lt;- list()
&lt;p&gt;if(any(sapply(df, class) == &amp;lsquo;factor&amp;rsquo;)){
result$Factor &amp;lt;- df %&amp;gt;% select_if(is.factor) %&amp;gt;% imap(summary_column)
}
if(any(sapply(df, class) == &amp;lsquo;numeric&amp;rsquo;)){
result$Numeric &amp;lt;- df %&amp;gt;% select_if(is.numeric) %&amp;gt;% imap_dfr(summary_column)
}&lt;/p&gt;
&lt;p&gt;return(result)
}&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;/p&amp;gt;
&amp;lt;/details&amp;gt;	

&amp;lt;details&amp;gt;
&amp;lt;summary&amp;gt;Column dataframe summary&amp;lt;/summary&amp;gt;
&amp;lt;p&amp;gt;
```{r}
summary_column &amp;lt;- function(df.column, name.column){
  # Function that get a column from a dataframe and return statistics on it.
  # Depending on the column class, the results will not be the same.
  if(class(df.column) == &#39;factor&#39;){
    colName &amp;lt;- name.column
    df.column %&amp;gt;% fct_count() %&amp;gt;% rename(!!colName := f, Count = n)    
  } else if(class(df.column) == &#39;numeric&#39;){
    tibble(
      Name = name.column,
      NA_num = sum(is.na(df.column)),
      Unique = length(unique(df.column)),
      Range = max(df.column, na.rm = TRUE) - min(df.column, na.rm = TRUE),
      Mean = round(mean(df.column, na.rm = TRUE), digits = 2),
      Variance = round(var(df.column, na.rm = TRUE), digits = 2),
      Minimum = min(df.column, na.rm = TRUE),
      Q05 = quantile(df.column, probs = .05, na.rm = TRUE),
      Q10 = quantile(df.column, probs = .10, na.rm = TRUE),
      Q25 = quantile(df.column, probs = .25, na.rm = TRUE),
      Q50 = quantile(df.column, probs = .50, na.rm = TRUE),
      Q75 = quantile(df.column, probs = .75, na.rm = TRUE),
      Q90 = quantile(df.column, probs = .90, na.rm = TRUE),
      Q95 = quantile(df.column, probs = .95, na.rm = TRUE),
      Maximum = max(df.column, na.rm = TRUE)
    )
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/p&gt;
&lt;/details&gt;
&lt;h3 id=&#34;print-functions&#34;&gt;Print functions&lt;/h3&gt;
&lt;details&gt;
&lt;summary&gt;Print summary dataframe&lt;/summary&gt;
&lt;p&gt;
```{r}
print_summary_df &lt;- function(l){
  # Print function for the summary of dataframe to be rendered in html.
  for(i in seq_along(l)){
    cat(glue::glue(&#34;&lt;ul&gt;&#34;))
    cat(glue::glue(&#34;&lt;li&gt; **{names(l)[i]} variables** &lt;/li&gt;\n\n&#34;))
    if(class(l[[i]]) == &#39;list&#39;){
      for(j in seq_along(l[[i]])){
        cat(glue::glue(&#34;&lt;ul&gt;&#34;))
        cat(glue::glue(&#34;&lt;li&gt; {names(l[[i]][j])} &lt;/li&gt;\n\n&#34;))
        cat(&#39;&lt;div style=&#34;overflow-x:auto;&#34;&gt;\n&#39;)
        l[[i]][j] %&gt;%
          kable(format = &#39;html&#39;) %&gt;%
          kable_styling(bootstrap_options = c(&#34;striped&#34;, &#34;hover&#34;, &#34;condensed&#34;, &#34;responsive&#34;), position = &#34;center&#34;) %&gt;%
          print()
        cat(&#39;&lt;/div&gt;&lt;/ul&gt;\n\n&#39;)
      }
    } else{
      cat(&#39;&lt;div style=&#34;overflow-x:auto;&#34;&gt;\n&#39;)
      l[[i]] %&gt;%
        kable(format = &#39;html&#39;) %&gt;%
        kable_styling(bootstrap_options = c(&#34;striped&#34;, &#34;hover&#34;, &#34;condensed&#34;, &#34;responsive&#34;), position = &#34;center&#34;) %&gt;%
        print()  
       cat(&#39;&lt;/div&gt;\n&#39;)
    }
    cat(glue::glue(&#34;&lt;/ul&gt;\n&#34;))
  }
}
&lt;pre&gt;&lt;code&gt;&amp;lt;/p&amp;gt;
&amp;lt;/details&amp;gt;

&amp;lt;details&amp;gt;
&amp;lt;summary&amp;gt;Print dataframe&amp;lt;/summary&amp;gt;
&amp;lt;p&amp;gt;
```{r}
print_df &amp;lt;- function(l){
  # Print function for dataframe to be renderer in html.
  cat(&#39;&amp;lt;div style=&amp;quot;overflow-x:auto;&amp;quot;&amp;gt;\n&#39;)
  l %&amp;gt;% 
    kable(format = &#39;html&#39;) %&amp;gt;%
    kable_styling(bootstrap_options = c(&amp;quot;striped&amp;quot;, &amp;quot;hover&amp;quot;, &amp;quot;condensed&amp;quot;, &amp;quot;responsive&amp;quot;), position = &amp;quot;center&amp;quot;) %&amp;gt;%
    print()
  cat(&#39;&amp;lt;/div&amp;gt;&amp;lt;/ul&amp;gt;\n\n&#39;)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/p&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;Print summary lm&lt;/summary&gt;
&lt;p&gt;
```{r}
print_summary_lm &lt;- function(lm_summary){
  # Print function for lm summary to be renderer in html.
  cat(glue::glue(&#34;Results of the linear model on the **{lm_summary$call$data}** dataset.\n&#34;))
&lt;p&gt;cat(glue::glue(&amp;ldquo;&lt;ul&gt;&amp;rdquo;))&lt;/p&gt;
&lt;h1 id=&#34;print-the-formula&#34;&gt;Print the formula&lt;/h1&gt;
&lt;p&gt;cat(glue::glue(&amp;ldquo;&lt;li&gt; &lt;em&gt;Formula&lt;/em&gt;: &amp;ldquo;,
&amp;ldquo;{deparse(lm_summary$call$formula)} &lt;/li&gt;&amp;rdquo;))&lt;/p&gt;
&lt;h1 id=&#34;treat-the-residuals&#34;&gt;Treat the residuals&lt;/h1&gt;
&lt;p&gt;cat(glue::glue(&amp;ldquo;&lt;li&gt; &lt;em&gt;Residuals&lt;/em&gt; &lt;/li&gt;\n&amp;rdquo;))
cat(&amp;lsquo;&lt;div style=&#34;overflow-x:auto;&#34;&gt;\n&amp;rsquo;)
lm_summary$residuals %&amp;gt;% summary_column(name.column = &amp;lsquo;Residuals&amp;rsquo;) %&amp;gt;%
kable(format = &amp;lsquo;html&amp;rsquo;, digits = 2) %&amp;gt;%
kable_styling(bootstrap_options = c(&amp;ldquo;striped&amp;rdquo;, &amp;ldquo;hover&amp;rdquo;, &amp;ldquo;condensed&amp;rdquo;, &amp;ldquo;responsive&amp;rdquo;), position = &amp;ldquo;center&amp;rdquo;) %&amp;gt;%
print()
cat(&amp;lsquo;&lt;/div&gt;\n\n&amp;rsquo;)&lt;/p&gt;
&lt;h1 id=&#34;treat-the-regression-coefficient&#34;&gt;Treat the regression coefficient&lt;/h1&gt;
&lt;p&gt;cat(glue::glue(&amp;ldquo;&lt;li&gt; &lt;em&gt;Coefficients&lt;/em&gt; &lt;/li&gt;\n&amp;rdquo;))
cat(&amp;lsquo;&lt;div style=&#34;overflow-x:auto;&#34;&gt;\n&amp;rsquo;)
coef &amp;lt;- lm_summary$coefficients
coef[, &amp;lsquo;Pr(&amp;gt;|t|)&#39;] &amp;lt;- format.pval(coef[, &amp;lsquo;Pr(&amp;gt;|t|)&#39;])
coef &amp;lt;- coef %&amp;gt;% as.data.frame(stringsAsFactors = FALSE) %&amp;gt;%
rownames_to_column(&amp;lsquo;Variable&amp;rsquo;) %&amp;gt;%
as.tibble() %&amp;gt;%
map_at(c(&amp;ldquo;Estimate&amp;rdquo;, &amp;ldquo;Std. Error&amp;rdquo;, &amp;ldquo;t value&amp;rdquo;), as.numeric)
coef %&amp;gt;% as.tibble() %&amp;gt;%
kable(format = &amp;lsquo;html&amp;rsquo;, digits = 5) %&amp;gt;%
kable_styling(bootstrap_options = c(&amp;ldquo;striped&amp;rdquo;, &amp;ldquo;hover&amp;rdquo;, &amp;ldquo;condensed&amp;rdquo;, &amp;ldquo;responsive&amp;rdquo;), position = &amp;ldquo;center&amp;rdquo;) %&amp;gt;%
print()
cat(&amp;lsquo;&lt;/div&gt;\n\n&amp;rsquo;)&lt;/p&gt;
&lt;h1 id=&#34;treat-other-stats&#34;&gt;Treat other stats&lt;/h1&gt;
&lt;p&gt;pval &amp;lt;- format.pval(pf(lm_summary$fstatistic[1L], lm_summary$fstatistic[2L],
lm_summary$fstatistic[3L], lower.tail = FALSE), digits = 3)
cat(glue::glue(&amp;ldquo;&lt;li&gt; &lt;em&gt;Residual standard error&lt;/em&gt;: &amp;ldquo;,
&amp;ldquo;{round(lm_summary$sigma, 3)} on {lm_summary$df[2]} degrees of freedom. &lt;/li&gt;&amp;rdquo;))
cat(glue::glue(&amp;ldquo;&lt;li&gt; &lt;em&gt;Multiple $R^2$&lt;/em&gt;: {round(lm_summary$r.squared, 3)}.&lt;/li&gt;&amp;rdquo;))
cat(glue::glue(&amp;ldquo;&lt;li&gt; &lt;em&gt;Adjusted $R^2$&lt;/em&gt;: {round(lm_summary$adj.r.squared, 3)}.&lt;/li&gt;&amp;rdquo;))
cat(glue::glue(&amp;ldquo;&lt;li&gt; &lt;em&gt;F-statistic&lt;/em&gt;: &amp;ldquo;,
&amp;ldquo;{round(lm_summary$fstatistic[1L], 3)} on {lm_summary$fstatistic[2L]} and {lm_summary$fstatistic[3L]}, &amp;ldquo;,
&amp;ldquo;p-value: {pval}. &lt;/li&gt;&amp;rdquo;))&lt;/p&gt;
&lt;p&gt;cat(glue::glue(&amp;ldquo;&lt;/ul&gt;&amp;rdquo;))
}&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;/p&amp;gt;
&amp;lt;/details&amp;gt;

&amp;lt;details&amp;gt;
&amp;lt;summary&amp;gt;Print summary glm&amp;lt;/summary&amp;gt;
&amp;lt;p&amp;gt;
```{r}
print_summary_glm &amp;lt;- function(glm_summary){
  cat(glue::glue(&amp;quot;Results of the model on the **{glm_summary$call$data}** dataset.\n&amp;quot;))
  
  cat(glue::glue(&amp;quot;&amp;lt;ul&amp;gt;&amp;quot;))
  # Print the formula
  cat(glue::glue(&amp;quot;&amp;lt;li&amp;gt; *Formula*: &amp;quot;, 
                 &amp;quot;{deparse(glm_summary$call$formula)} &amp;lt;/li&amp;gt;&amp;quot;))
  
  # Treat the residuals
  cat(glue::glue(&amp;quot;&amp;lt;li&amp;gt; *Residuals* &amp;lt;/li&amp;gt;\n&amp;quot;))
  cat(&#39;&amp;lt;div style=&amp;quot;overflow-x:auto;&amp;quot;&amp;gt;\n&#39;)
  glm_summary$deviance.resid %&amp;gt;% summary_column(name.column = &#39;Residuals&#39;) %&amp;gt;%
    kable(format = &#39;html&#39;, digits = 2) %&amp;gt;%
    kable_styling(bootstrap_options = c(&amp;quot;striped&amp;quot;, &amp;quot;hover&amp;quot;, &amp;quot;condensed&amp;quot;, &amp;quot;responsive&amp;quot;), position = &amp;quot;center&amp;quot;) %&amp;gt;%
    print()
  cat(&#39;&amp;lt;/div&amp;gt;\n\n&#39;)
  
  # Treat the regression coefficient
  cat(glue::glue(&amp;quot;&amp;lt;li&amp;gt; *Coefficients* &amp;lt;/li&amp;gt;\n&amp;quot;))
  cat(&#39;&amp;lt;div style=&amp;quot;overflow-x:auto;&amp;quot;&amp;gt;\n&#39;)
  coef &amp;lt;- glm_summary$coefficients
  coef[, &#39;Pr(&amp;gt;|z|)&#39;] &amp;lt;- format.pval(coef[, &#39;Pr(&amp;gt;|z|)&#39;])
  coef &amp;lt;- coef %&amp;gt;% as.data.frame(stringsAsFactors = FALSE) %&amp;gt;% 
    rownames_to_column(&#39;Variable&#39;) %&amp;gt;% 
    as.tibble() %&amp;gt;% 
    map_at(c(&amp;quot;Estimate&amp;quot;, &amp;quot;Std. Error&amp;quot;, &amp;quot;z value&amp;quot;), as.numeric)
  coef %&amp;gt;% as.tibble() %&amp;gt;%
    kable(format = &#39;html&#39;, digits = 5) %&amp;gt;%
    kable_styling(bootstrap_options = c(&amp;quot;striped&amp;quot;, &amp;quot;hover&amp;quot;, &amp;quot;condensed&amp;quot;, &amp;quot;responsive&amp;quot;), position = &amp;quot;center&amp;quot;) %&amp;gt;%
    print()
  cat(&#39;&amp;lt;/div&amp;gt;\n\n&#39;)
  
  # Treat other stats
  cat(glue::glue(&amp;quot;&amp;lt;li&amp;gt; *Null deviance*: &amp;quot;, 
                 &amp;quot;{round(glm_summary$null.deviance, 3)} on {glm_summary$df.null} degrees of freedom. &amp;lt;/li&amp;gt;&amp;quot;))
  cat(glue::glue(&amp;quot;&amp;lt;li&amp;gt; *Residual deviance*: &amp;quot;, 
                 &amp;quot;{round(glm_summary$deviance, 3)} on {glm_summary$df.residual} degrees of freedom. &amp;lt;/li&amp;gt;&amp;quot;))
  cat(glue::glue(&amp;quot;&amp;lt;li&amp;gt; *AIC*: &amp;quot;, 
                 &amp;quot;{round(glm_summary$aic, 3)}&amp;lt;/li&amp;gt;&amp;quot;))
  
  cat(glue::glue(&amp;quot;&amp;lt;/ul&amp;gt;\n&amp;quot;))
}

&lt;/code&gt;&lt;/pre&gt;
&lt;/p&gt;
&lt;/details&gt;
&lt;h3 id=&#34;plot-functions&#34;&gt;Plot functions&lt;/h3&gt;
&lt;details&gt;
&lt;summary&gt;Plot confusion matrix&lt;/summary&gt;
&lt;p&gt;
```{r}
plot_confusion_matrix &lt;- function(confusion_matrix){
  confusion_matrix %&gt;%
    as.data.frame(optional = TRUE) %&gt;% 
    rownames_to_column() %&gt;%
    rename(&#39;Var1&#39; = &#39;.&#39;) %&gt;%
    ggplot() +
    geom_text(aes(x = Var1, y = Var2, label = Freq), size = 4) +
    xlab(&#39;Prediction&#39;) +
    ylab(&#39;True&#39;) +
    geom_hline(aes(yintercept = 1.5), size = 0.2) +
    geom_vline(aes(xintercept = 1.5), size = 0.2) +
    theme_bw() +
    scale_x_discrete(position = &#34;top&#34;) +
    theme(panel.grid = element_blank(),
          axis.ticks = element_blank())
}
```
&lt;/p&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;Plot regsubset summary&lt;/summary&gt;
&lt;p&gt;
```{r}
ggregsubsets &lt;- function(x, criterion = c(&#34;rsq&#34;, &#34;rss&#34;, &#34;adjr2&#34;, &#34;cp&#34;, &#34;bic&#34;)){
  # https://gist.github.com/dkahle/7942a7eba8aaa026d0bab6a1e9d88580
  require(dplyr); require(ggplot2); require(tidyr)
  if(inherits(x, &#34;regsubsets&#34;)) x &lt;- summary(x)
  if(!inherits(x, &#34;summary.regsubsets&#34;))
    stop(&#34;The input to ggregsubsets() should be the result of regsubsets().&#34;)
  df &lt;- bind_cols(
    as.data.frame(x$which), 
    as.data.frame(x[criterion]),
    data.frame(nvars = 1:nrow(x$which))
  )
  names(df)[1] &lt;- &#34;Int&#34;
  if(&#34;rsq&#34; %in% criterion) df &lt;- df %&gt;% mutate(rsq = 100*rsq)
  if(&#34;adjr2&#34; %in% criterion) df &lt;- df %&gt;% mutate(adjr2 = 100*adjr2)
&lt;p&gt;df &amp;lt;- df %&amp;gt;%
gather(variable, is_in, -criterion, -nvars) %&amp;gt;%
gather(measure, value, -nvars, -variable, -is_in)&lt;/p&gt;
&lt;p&gt;if(&amp;ldquo;rsq&amp;rdquo; %in% criterion) df[df[&amp;lsquo;measure&amp;rsquo;] == &amp;lsquo;rsq&amp;rsquo;, &amp;lsquo;measure&amp;rsquo;] &amp;lt;- &amp;lsquo;$R^2$&amp;rsquo;
if(&amp;ldquo;rss&amp;rdquo; %in% criterion) df[df[&amp;lsquo;measure&amp;rsquo;] == &amp;lsquo;rss&amp;rsquo;, &amp;lsquo;measure&amp;rsquo;] &amp;lt;- &amp;lsquo;$RSS$&amp;rsquo;
if(&amp;ldquo;adjr2&amp;rdquo; %in% criterion) df[df[&amp;lsquo;measure&amp;rsquo;] == &amp;lsquo;adjr2&amp;rsquo;, &amp;lsquo;measure&amp;rsquo;] &amp;lt;- &amp;lsquo;Adjusted $R^2$&amp;rsquo;
if(&amp;ldquo;cp&amp;rdquo; %in% criterion) df[df[&amp;lsquo;measure&amp;rsquo;] == &amp;lsquo;cp&amp;rsquo;, &amp;lsquo;measure&amp;rsquo;] &amp;lt;- &amp;lsquo;$C_p$&amp;rsquo;
if(&amp;ldquo;bic&amp;rdquo; %in% criterion) df[df[&amp;lsquo;measure&amp;rsquo;] == &amp;lsquo;bic&amp;rsquo;, &amp;lsquo;measure&amp;rsquo;] &amp;lt;- &amp;lsquo;$BIC$&amp;rsquo;&lt;/p&gt;
&lt;p&gt;p &amp;lt;- ggplot(df, aes(variable, factor(round(value)))) +
geom_tile(aes(fill = is_in)) +
facet_wrap(~ measure, scales = &amp;ldquo;free&amp;rdquo;) +
scale_fill_manual(&amp;quot;&amp;quot;, values = c(&amp;ldquo;TRUE&amp;rdquo; = &amp;ldquo;black&amp;rdquo;, &amp;ldquo;FALSE&amp;rdquo; = &amp;ldquo;white&amp;rdquo;), guide = FALSE) +
labs(x = &amp;ldquo;&amp;quot;, y = &amp;ldquo;&amp;quot;)
return(p)
}&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;/p&amp;gt;
&amp;lt;/details&amp;gt;

&amp;lt;details&amp;gt;
&amp;lt;summary&amp;gt;Plot criteria for model selection&amp;lt;/summary&amp;gt;
&amp;lt;p&amp;gt;
```{r}
ggcriteria &amp;lt;- function(x, criterion = &amp;quot;bic&amp;quot;){
  require(dplyr); require(ggplot2); require(tidyr)
  if(inherits(x, &amp;quot;regsubsets&amp;quot;)) x &amp;lt;- summary(x)
  if(!inherits(x, &amp;quot;summary.regsubsets&amp;quot;))
    stop(&amp;quot;The input to ggregsubsets() should be the result of regsubsets().&amp;quot;)
  
  if(&amp;quot;rsq&amp;quot; == criterion) crit &amp;lt;- &#39;$R^2$&#39;
  if(&amp;quot;rss&amp;quot; == criterion) crit &amp;lt;- &#39;$RSS$&#39;
  if(&amp;quot;adjr2&amp;quot; == criterion) crit &amp;lt;- &#39;Adjusted $R^2$&#39;
  if(&amp;quot;cp&amp;quot; == criterion) crit &amp;lt;- &#39;$C_p$&#39;
  if(&amp;quot;bic&amp;quot; == criterion) crit &amp;lt;- &#39;$BIC$&#39;
  
  if((criterion == &amp;quot;adjr2&amp;quot;) | (criterion == &amp;quot;rsq&amp;quot;)) m &amp;lt;- which.max(x[[criterion]])
  else m &amp;lt;- which.min(x[[criterion]])
  
  p &amp;lt;- ggplot() +
    geom_line(aes(x = seq(1, length(x[[criterion]])), y = x[[criterion]])) + 
    geom_point(aes(x = m, y = x[[criterion]][m]), col = &#39;red&#39;, size = 3) +
    xlab(&#39;Number of variables&#39;) +
    scale_x_continuous(breaks = seq(1, length(x[[criterion]])), minor_breaks = NULL) +
    ylab(crit)
  return(p)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/p&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;Plot cross-validation error from `cv.glmnet` function&lt;/summary&gt;
&lt;p&gt;
```{r}
ggcv.glmnet &lt;- function(x){
  require(dplyr); require(ggplot2); require(glmnet)
  if(!inherits(x, &#34;cv.glmnet&#34;))
    stop(&#34;The input of ggcv.glmnet() should be the result og cv.glmnet().&#34;)
&lt;p&gt;df &amp;lt;- tibble(lambda = log(x$lambda), cvm = x$cvm, cvsd = x$cvsd)
p &amp;lt;- ggplot(df, aes(lambda, cvm, ymin = cvm - cvsd, ymax = cvm + cvsd)) +
geom_point(col = &amp;lsquo;red&amp;rsquo;) +
geom_errorbar() +
geom_vline(aes(xintercept = df$lambda[which.min(df$cvm)]), col = &amp;lsquo;blue&amp;rsquo;, linetype = 2) +
xlab(&amp;lsquo;$\log(\lambda)$&amp;rsquo;) +
ylab(&amp;lsquo;Mean-Squared Error&amp;rsquo;)
return(p)
}&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;/p&amp;gt;
&amp;lt;/details&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
